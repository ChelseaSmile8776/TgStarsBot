package com.example.TgStarsBot.service;


import com.example.TgStarsBot.config.BotConfig;
import com.example.TgStarsBot.model.TaskLink;
import com.example.TgStarsBot.model.User;
import com.example.TgStarsBot.repository.TaskRepository;
import com.example.TgStarsBot.repository.UserRepository;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.commands.SetMyCommands;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
import org.telegram.telegrambots.meta.api.objects.Chat;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.commands.BotCommand;
import org.telegram.telegrambots.meta.api.objects.commands.scope.BotCommandScopeDefault;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import java.sql.Timestamp;
import java.util.*;



@Slf4j
@Component
public class TelegramBot extends TelegramLongPollingBot {
    private final java.util.concurrent.ConcurrentHashMap<Long, String> topupTarget = new java.util.concurrent.ConcurrentHashMap<>(); // "ad" –∏–ª–∏ "regular"
    private final java.util.concurrent.ConcurrentHashMap<Long, Integer> topupAmount = new java.util.concurrent.ConcurrentHashMap<>();
    private static final String STATE_WAIT_AMOUNT = "–æ–∂–∏–¥–∞–Ω–∏–µ_—Å—É–º–º—ã";
    private final java.util.concurrent.ConcurrentHashMap<Long, java.util.Set<Long>> rewardedChannels = new java.util.concurrent.ConcurrentHashMap<>();
    // –∞–Ω—Ç–∏–¥—É–±–ª—å –¥–ª—è —É—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π (—á—Ç–æ–±—ã –Ω–µ –∑–∞—á–∏—Å–ª—è—Ç—å 2 —Ä–∞–∑–∞)
    private final java.util.Set<String> paidGuard =
            java.util.Collections.newSetFromMap(new java.util.concurrent.ConcurrentHashMap<>());


    private java.util.Set<Long> rewardedSet(long userId) {
        return rewardedChannels.computeIfAbsent(userId, k -> java.util.concurrent.ConcurrentHashMap.<Long>newKeySet());
    }

    private final java.util.Map<Long, Long> channelIdCache = new java.util.concurrent.ConcurrentHashMap<>();

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private TaskRepository taskRepository;

    @Autowired
    private com.example.TgStarsBot.repository.PaymentRepository paymentRepository;


    final BotConfig config;

    private final Map<Long, String> userStates = new HashMap<>();
    private final Map<Long, String> channelCache = new HashMap<>();
    private final Map<Long, TaskLink> pendingConfirmations = new HashMap<>();

    public TelegramBot(BotConfig config) {
        this.config = config;
        List<BotCommand> listOfCommands = new ArrayList<>();
        listOfCommands.add(new BotCommand("/start", "\uD83E\uDD16 –ù–∞—á–∞—Ç—å"));
        listOfCommands.add(new BotCommand("/profile", "\uD83D\uDE0E –ü—Ä–æ—Ñ–∏–ª—å"));
        try {
            this.execute(new SetMyCommands(listOfCommands, new BotCommandScopeDefault(), null));
        }
        catch (TelegramApiException e) {
            log.error("–û–®–ò–ë–ö–ê –ö–û–ú–ê–ù–î–´ : " + e.getMessage());
        }
    }

    @Override
    public String getBotUsername() {
        return config.getBotName();
    }

    @Override
    public String getBotToken() {
        return config.getToken();
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasPreCheckoutQuery()) {
            var q = update.getPreCheckoutQuery();
            try {
                execute(org.telegram.telegrambots.meta.api.methods.AnswerPreCheckoutQuery.builder()
                        .preCheckoutQueryId(q.getId())
                        .ok(true)
                        .build());
            } catch (TelegramApiException e) {
                log.error("pre_checkout error: {}", e.getMessage());
            }
            return;
        }
        // === Stars: —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç—ë–∂ ===
        if (update.hasMessage() && update.getMessage().hasSuccessfulPayment()) {
            var sp = update.getMessage().getSuccessfulPayment();

            if ("XTR".equalsIgnoreCase(sp.getCurrency())) {
                String payload = sp.getInvoicePayload();
                try {
                    String[] parts = payload.split(":");
                    if (parts.length >= 3 && "AD_TOPUP".equals(parts[0])) {
                        long userId = Long.parseLong(parts[1]);

                        // –°—É–º–º—É —Å—Ç–∞—Ä–∞–µ–º—Å—è –≤–∑—è—Ç—å –∏–∑ payload
                        int stars;
                        try {
                            stars = Integer.parseInt(parts[2]);
                        } catch (Exception ignored) {
                            int total = sp.getTotalAmount();      // –∏–Ω–æ–≥–¥–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç *100
                            stars = total >= 100 ? total / 100 : total;
                        }

                        final int starsFinal = stars; // <-- –¥–æ–±–∞–≤—å —ç—Ç–æ
                        userRepository.findById(userId).ifPresent(u -> {
                            u.setAdsBalance(java.util.Optional.ofNullable(u.getAdsBalance()).orElse(0) + starsFinal);
                            userRepository.save(u);
                        });

                        sendMessage(userId, "‚úÖ –ó–∞—á–∏—Å–ª–µ–Ω–æ " + stars + "‚≠êÔ∏è –Ω–∞ —Ä–µ–∫–ª–∞–º–Ω—ã–π –±–∞–ª–∞–Ω—Å.");

                        // —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–ª–∞—Ç—ë–∂ –≤ –∂—É—Ä–Ω–∞–ª
                        try {
                            com.example.TgStarsBot.model.Payment p = new com.example.TgStarsBot.model.Payment();
                            p.setChatId(userId);

                            // username –±–µ—Ä—ë–º –∏–∑ –ë–î (–µ—Å–ª–∏ –æ–Ω —Ç–∞–º –µ—Å—Ç—å)
                            userRepository.findById(userId).ifPresent(u -> p.setUserName(u.getUserName()));

                            p.setTarget("ad");                    // –∏–∑ payload
                            p.setMethod("stars");                 // —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
                            p.setCurrency(sp.getCurrency());      // "XTR"
                            p.setAmountStars(stars);              // —Å—É–º–º–∞ –≤ –∑–≤—ë–∑–¥–∞—Ö (–Ω–µ *100)
                            p.setTelegramPaymentChargeId(sp.getTelegramPaymentChargeId());
                            p.setProviderPaymentChargeId(sp.getProviderPaymentChargeId());
                            p.setPayload(sp.getInvoicePayload());
                            p.setCreatedAt(new java.sql.Timestamp(System.currentTimeMillis()));

                            paymentRepository.save(p);
                        } catch (Exception ex) {
                            log.error("payment log save error: {}", ex.getMessage());
                        }

                    }
                } catch (Exception e) {
                    log.error("successful_payment parse error: {}", e.getMessage());
                }
            }
            return; // –±–æ–ª—å—à–µ –Ω–∏—á–µ–≥–æ –≤ —ç—Ç–æ–º –∞–ø–¥–µ–π—Ç–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ
        }

        if (update.hasMessage() && update.getMessage().hasText()) {
            String messageText = update.getMessage().getText();
            long chatId = update.getMessage().getChatId();
            if (messageText.startsWith("/start")) {
                registerUser(update.getMessage());
                if (messageText.length() > 6) {
                    String code = messageText.substring(7).trim();
                    processReferralCode(chatId, code);
                }
                startCommandRecieved(chatId, update.getMessage().getChat().getUserName());
                suggestTaskCommandRecieved(chatId, update.getMessage().getChat().getUserName());
            }
            else if (messageText.equals("/profile")) {
                profileCommandRecieved(chatId, update.getMessage().getChat().getUserName());
            }
            else if (messageText.equals("/cancel")) {
                startCommandRecieved(chatId, update.getMessage().getChat().getUserName());
                suggestTaskCommandRecieved(chatId, update.getMessage().getChat().getUserName());
                resetTopupState(chatId);
            }
            else if (messageText.equals("‚≠êÔ∏è –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –ó–≤—ë–∑–¥—ã")) {
                startCommandRecieved(chatId, update.getMessage().getChat().getUserName());
                suggestTaskCommandRecieved(chatId, update.getMessage().getChat().getUserName());
            }
            else if (messageText.equals("üíé –ó–∞–¥–∞–Ω–∏—è")) {
                taskCommandRecieved(chatId, update.getMessage().getChat().getUserName());
            }
            else if (messageText.equals("üéÅ –í—ã–≤–µ—Å—Ç–∏ –ó–≤—ë–∑–¥—ã")) {
                withdrawCommandRecieved(chatId, update.getMessage().getChat().getUserName());
            }
            else if (messageText.equals("üë• –ö—É–ø–∏—Ç—å –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤")) {
                profileCommandRecieved(chatId, update.getMessage().getChat().getUserName());
            }
            else if (messageText.equals("üí∏ –î—ë—à–µ–≤–æ –ö—É–ø–∏—Ç—å –ó–≤—ë–∑–¥—ã")) {
                buyStarsCommandRecieved(chatId, update.getMessage().getChat().getUserName());
            }
        } else if (update.hasCallbackQuery()) {
            String callbackData = update.getCallbackQuery().getData();
            long messageId = update.getCallbackQuery().getMessage().getMessageId();
            long chatId = update.getCallbackQuery().getMessage().getChatId();

            if (callbackData.equals("TASK_BUTTON")) {
                taskCommandRecieved(chatId, update.getCallbackQuery().getFrom().getUserName());
            }
            else if (callbackData.equals("MY_TASKS_BUTTON")) {
                chatId = update.getCallbackQuery().getMessage().getChatId();
                messageId = update.getCallbackQuery().getMessage().getMessageId();
                String creatorUsername = update.getCallbackQuery().getFrom().getUserName(); // username –∞–≤—Ç–æ—Ä–∞ –∑–∞–¥–∞–Ω–∏—è

                java.util.List<TaskLink> mine = new java.util.ArrayList<>();
                taskRepository.findAll().forEach(t -> {
                    String u = t.getUserName();
                    if (creatorUsername == null) {
                        // –µ—Å–ª–∏ —É –∞–≤—Ç–æ—Ä–∞ –Ω–µ—Ç username, —Å—á–∏—Ç–∞–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ–º —Ç–æ–ª—å–∫–æ –ø—É—Å—Ç—ã–µ userName –≤ –∑–∞–¥–∞—á–∞—Ö
                        if (u == null || u.isBlank()) mine.add(t);
                    } else {
                        if (creatorUsername.equalsIgnoreCase(u)) mine.add(t);
                    }
                });

                StringBuilder sb = new StringBuilder();
                if (mine.isEmpty()) {
                    sb.append("\uD83D\uDCCB –ú–æ–∏ –∑–∞–¥–∞–Ω–∏—è\n" +
                            "\n" +
                            "–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞—à–∏–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏.\n" +
                            "\n" +
                            "–£—Å–ª–æ–≤–Ω—ã–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è:\n" +
                            "‚úÖ - –ó–∞–≤–µ—Ä—à–µ–Ω–æ\n" +
                            "‚ñ∂\uFE0F - –í –ø—Ä–æ—Ü–µ—Å—Å–µ\n" +
                            "‚è≥ - –û—Å—Ç–∞–ª–æ—Å—å\n" +
                            "‚õî\uFE0F - –û—Ç–º–µ–Ω–µ–Ω–æ\n" +
                            "\n" +
                            "–î–ª—è –≤—ã–±–æ—Ä–∞ –∑–∞–¥–∞–Ω–∏—è, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏:");
                } else {
                    sb.append("üìã –í–∞—à–∏ –∑–∞–¥–∞–Ω–∏—è:\n\n");
                    int i = 1;
                    for (TaskLink t : mine) {
                        Long target = t.getTargetSubs();
                        Long current = 0L;
                        try {
                            java.lang.reflect.Method getCur = TaskLink.class.getMethod("getCurrentSubs");
                            Object curVal = getCur.invoke(t);
                            if (curVal instanceof Long) current = (Long) curVal;
                        } catch (Exception ignored) {}
                        long total = target != null ? target : 0L;
                        long left = total > 0 ? Math.max(total - (current != null ? current : 0L), 0L) : 0L;

                        sb.append(i++).append(") ").append(t.getLink() != null ? t.getLink() : "‚Äî").append("\n")
                                .append("   ‚ñ∂\uFE0F - –í –ø—Ä–æ—Ü–µ—Å—Å–µ: ").append(current).append("/").append(total).append("\n");
                        if (total > 0) {
                            sb.append("  ‚è≥ - –û—Å—Ç–∞–ª–æ—Å—å: ").append(left).append("\n");
                        }
                    }
                    sb.append("\n" + "–î–ª—è –≤—ã–±–æ—Ä–∞ –∑–∞–¥–∞–Ω–∏—è, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏:");
                }
                org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText msg = new org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText();
                msg.setChatId(String.valueOf(chatId));
                msg.setMessageId((int) messageId);
                msg.setText(sb.toString());
                try {
                    execute(msg);
                } catch (org.telegram.telegrambots.meta.exceptions.TelegramApiException e) {
                    log.error("Callback –û–®–ò–ë–ö–ê: MY_TASKS_BUTTON ---> " + e.getMessage());
                }
                org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup kb = new org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup();
                java.util.List<java.util.List<org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton>> rows = new java.util.ArrayList<>();
                int i = 1;
                for (TaskLink t : mine) {
                    org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton cancelBtn =
                            new org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton();
                    cancelBtn.setText("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å ‚Ññ" + i++);
                    cancelBtn.setCallbackData("MYTASK_CANCEL:" + t.getChatId());
                    java.util.List<org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton> row = new java.util.ArrayList<>();
                    row.add(cancelBtn);
                    rows.add(row);
                }
// –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
                org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton backBtn = new org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton();
                backBtn.setText("‚¨ÖÔ∏è –ù–∞–∑–∞–¥");
                backBtn.setCallbackData("MY_TASKS_BACK");
                rows.add(java.util.List.of(backBtn));
                kb.setKeyboard(rows);

                msg = new org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText();
                msg.setChatId(String.valueOf(chatId));
                msg.setMessageId((int) messageId);
                msg.setText(sb.toString());
                msg.setReplyMarkup(kb);
                try {
                    execute(msg);
                } catch (org.telegram.telegrambots.meta.exceptions.TelegramApiException e) {
                    log.error("Callback –û–®–ò–ë–ö–ê: MY_TASKS_BUTTON ---> " + e.getMessage());
                }
            }
            else if (callbackData.startsWith("MYTASK_CANCEL:")) {
                String[] parts = callbackData.split(":", 2);
                Long taskId;
                try { taskId = Long.parseLong(parts[1]); } catch (Exception ex) { return; }

                var opt = taskRepository.findById(taskId);
                if (opt.isEmpty()) {
                    EditMessageText em = new EditMessageText();
                    em.setChatId(String.valueOf(chatId));
                    em.setMessageId((int) messageId);
                    em.setText("–≠—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —É–∂–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.");
                    try { execute(em); } catch (TelegramApiException ignored) {}
                    return;
                }
                TaskLink t = opt.get();
                String creatorUsername = update.getCallbackQuery().getFrom().getUserName();
                String owner = t.getUserName();
                boolean allowed = (creatorUsername == null || creatorUsername.isBlank())
                        ? (owner == null || owner.isBlank())
                        : (owner != null && creatorUsername.equalsIgnoreCase(owner));
                if (!allowed) {
                    try {
                        execute(org.telegram.telegrambots.meta.api.methods.AnswerCallbackQuery.builder()
                                .callbackQueryId(update.getCallbackQuery().getId())
                                .text("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —ç—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è.")
                                .showAlert(true).build());
                    } catch (TelegramApiException ignored) {}
                    return;
                }

                long target = t.getTargetSubs() != null ? t.getTargetSubs() : 0L;
                long current = safeCurrent(t); // —Ç–≤–æ–π —Ö–µ–ª–ø–µ—Ä
                long refund = Math.max(target - current, 0L);
                if (refund <= 0) {
                    taskRepository.delete(t);
                    EditMessageText em = new EditMessageText();
                    em.setChatId(String.valueOf(chatId));
                    em.setMessageId((int) messageId);
                    em.setText("–ó–∞–¥–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—Ç–æ–≤ –Ω–µ—Ç.");
                    try { execute(em); } catch (TelegramApiException ignored) {}
                    return;
                }

                InlineKeyboardMarkup kb = new InlineKeyboardMarkup();
                List<List<InlineKeyboardButton>> rows = new ArrayList<>();

                InlineKeyboardButton toAd = new InlineKeyboardButton();
                toAd.setText("‚Ü©Ô∏è " + refund + "‚≠êÔ∏è –Ω–∞ –†–µ–∫–ª–∞–º–Ω—ã–π");
                toAd.setCallbackData("MYTASK_REFUND_AD:" + taskId + ":" + refund);

                InlineKeyboardButton toBal = new InlineKeyboardButton();
                toBal.setText("‚Ü©Ô∏è " + refund + "‚≠êÔ∏è –Ω–∞ –û–±—ã—á–Ω—ã–π");
                toBal.setCallbackData("MYTASK_REFUND_BAL:" + taskId + ":" + refund);

                InlineKeyboardButton backBtn = new InlineKeyboardButton();
                backBtn.setText("‚¨Ö\uFE0F –ù–∞–∑–∞–¥");
                backBtn.setCallbackData("MY_TASKS_BACK");

                rows.add(List.of(toAd));
                rows.add(List.of(toBal));
                rows.add(List.of(backBtn));
                kb.setKeyboard(rows);

                EditMessageText em = new EditMessageText();
                em.setChatId(String.valueOf(chatId));
                em.setMessageId((int) messageId);
                em.setText("–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ?\n–û—Å—Ç–∞—Ç–æ–∫ –∫ –≤–æ–∑–≤—Ä–∞—Ç—É: " + refund + "‚≠êÔ∏è\n–í—ã–±–µ—Ä–∏—Ç–µ, –∫—É–¥–∞ –≤–µ—Ä–Ω—É—Ç—å:");
                em.setReplyMarkup(kb);

                try { execute(em); } catch (TelegramApiException ignored) {}
            }
            else if (callbackData.startsWith("MYTASK_REFUND_AD:") || callbackData.startsWith("MYTASK_REFUND_BAL:")) {
                String[] parts = callbackData.split(":");
                if (parts.length < 3) return;

                Long taskId;
                long refund;
                try {
                    taskId = Long.parseLong(parts[1]);
                    refund = Long.parseLong(parts[2]);
                } catch (Exception ex) { return; }
                var opt = taskRepository.findById(taskId);
                if (opt.isEmpty()) {
                    EditMessageText em = new EditMessageText();
                    em.setChatId(String.valueOf(chatId));
                    em.setMessageId((int) messageId);
                    em.setText("–ó–∞–¥–∞–Ω–∏–µ —É–∂–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ —Ä–∞–Ω–µ–µ.");
                    try { execute(em); } catch (TelegramApiException ignored) {}
                    return;
                }
                User user = userRepository.findById(chatId).orElse(null);
                if (user == null) return;

                if (callbackData.startsWith("MYTASK_REFUND_AD:")) {
                    user.setAdsBalance(java.util.Optional.ofNullable(user.getAdsBalance()).orElse(0) + (int) refund);
                } else {
                    user.setBalance(java.util.Optional.ofNullable(user.getBalance()).orElse(0) + (int) refund);
                }
                userRepository.save(user);
                taskRepository.delete(opt.get());
                try {
                    if (String.valueOf(taskId).equals(user.getActiveTask())) {
                        user.setActiveTask(null);
                        userRepository.save(user);
                    }
                } catch (Exception ignored) {}
                EditMessageText em = new EditMessageText();
                em.setChatId(String.valueOf(chatId));
                em.setMessageId((int) messageId);
                em.setText("–ó–∞–¥–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ " + refund + "‚≠êÔ∏è –Ω–∞ " +
                        (callbackData.startsWith("MYTASK_REFUND_AD:") ? "—Ä–µ–∫–ª–∞–º–Ω—ã–π" : "–æ–±—ã—á–Ω—ã–π") + " –±–∞–ª–∞–Ω—Å.");
                try { execute(em); } catch (TelegramApiException ignored) {}
            }
            else if (callbackData.equals("CREATE_TASK_BUTTON")) {
                String text = "\uD83D\uDC8E –°–æ–∑–¥–∞—Ç—å –ó–∞–¥–∞–Ω–∏–µ \n" +
                        "\n" +
                        "1. –ù–∞–∑–Ω–∞—á—å—Ç–µ –±–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞\n" +
                        "2. –í—ã–¥–∞–π—Ç–µ –ø—Ä–∞–≤–æ: ¬´–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤¬ª\n" +
                        "3. –ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å—é–¥–∞ –ª—é–±–æ–π –ø–æ—Å—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞\n" +
                        "\n" +
                        "‚ùó\uFE0F–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º—ã–π –ø–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –æ—Ç –ª–∏—Ü–∞ –∫–∞–Ω–∞–ª–∞\n" +
                        "\n" +
                        "–ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Ç–µ–º–∞—Ç–∏–∫–∏:\n" +
                        "SCAM –≤ –ª—é–±–æ–º –≤–∏–¥–µ, –õ—é–±—ã–µ —á–∞—Ç—ã, –†–∞–∑–¥–∞—á–∏ –ó–≤—ë–∑–¥, –ö–æ–Ω–∫—É—Ä–∏—Ä—É—é—â–∏–µ —Ç–µ–º–∞—Ç–∏–∫–∏, NSFW, –°—Ç–µ–Ω–¥–æ—Ñ—Ñ, –†–æ–±—É–∫—Å—ã\n" +
                        "\n" +
                        "–û—Ç–º–µ–Ω–∏—Ç—å ‚Äî /cancel";
                EditMessageText message = new EditMessageText();
                message.setChatId(String.valueOf(chatId));
                message.setText(text);
                message.setMessageId((int) messageId);
                userStates.put(chatId, "–æ–∂–∏–¥–∞–Ω–∏–µ_–ø–æ—Å—Ç–∞");
                try {
                    execute(message);
                }
                catch (TelegramApiException e) {
                    log.error("Callback –û–®–ò–ë–ö–ê: CREATE_TASK_BUTTON ---> " + e.getMessage());
                }
            }
            else if (callbackData.equals("ADS_BALANCE_BUTTON")) {
                startTopupFlow(chatId, update.getCallbackQuery().getFrom().getUserName(), "ad");
            }
            else if (callbackData.equals("GO_TO_CHANNEL_BUTTON")) {
                String text = "test –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ";
                EditMessageText message = new EditMessageText();
                message.setChatId(String.valueOf(chatId));
                message.setText(text);
                message.setMessageId((int) messageId);
                try {
                    execute(message);
                }
                catch (TelegramApiException e) {
                    log.error("Callback –û–®–ò–ë–ö–ê: GO_TO_CHANNEL_BUTTON ---> " + e.getMessage());
                }
            }
            else if (callbackData.equals("DONE_BUTTON")) {
                chatId = update.getCallbackQuery().getMessage().getChatId();
                messageId = update.getCallbackQuery().getMessage().getMessageId();
                long userId = update.getCallbackQuery().getFrom().getId(); // telegram user id

                TaskLink task = userRepository.findById(chatId).flatMap(u -> {
                    try { return taskRepository.findById(Long.parseLong(u.getActiveTask())); }
                    catch (Exception e) { return java.util.Optional.empty(); }
                }).orElse(null);

                if (task == null) {
                    // –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –Ω–µ—Ç ‚Äî –ø—Ä–æ—Å–∏–º –∑–∞–π—Ç–∏ –≤ –∑–∞–¥–∞–Ω–∏—è –∑–∞–Ω–æ–≤–æ
                    try {
                        execute(org.telegram.telegrambots.meta.api.methods.AnswerCallbackQuery.builder()
                                .callbackQueryId(update.getCallbackQuery().getId())
                                .text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è. –û—Ç–∫—Ä–æ–π ¬´üíé –ó–∞–¥–∞–Ω–∏—è¬ª.")
                                .showAlert(false)
                                .build());
                    } catch (TelegramApiException ignored) {}
                    EditMessageText m = new EditMessageText();
                    m.setChatId(String.valueOf(chatId));
                    m.setMessageId((int) messageId);
                    m.setText("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ. –ù–∞–∂–º–∏—Ç–µ ¬´üíé –ó–∞–¥–∞–Ω–∏—è¬ª –µ—â—ë —Ä–∞–∑.");
                    try { execute(m); } catch (TelegramApiException ignored) {}
                    return;
                }
                // –∞–Ω—Ç–∏–¥—É–±–ª—å –Ω–∞ —É—Ä–æ–≤–Ω–µ activeTask: –Ω–∞–≥—Ä–∞–∂–¥–∞–µ–º –¢–û–õ–¨–ö–û –µ—Å–ª–∏ activeTask == —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ
                Optional<User> uOpt = userRepository.findById(chatId);
                if (uOpt.isEmpty()) return;
                User u = uOpt.get();

                String expectedActive = String.valueOf(task.getChatId());
                if (!expectedActive.equals(u.getActiveTask())) {
                    // —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ (–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ–ª –Ω–∞–∂–∞—Ç—å –≤—Ç–æ—Ä–æ–π —Ä–∞–∑)
                    try {
                        execute(org.telegram.telegrambots.meta.api.methods.AnswerCallbackQuery.builder()
                                .callbackQueryId(update.getCallbackQuery().getId())
                                .text("–≠—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ.")
                                .showAlert(false)
                                .build());
                    } catch (TelegramApiException ignored) {}
                    EditMessageText m = new EditMessageText();
                    m.setChatId(String.valueOf(chatId));
                    m.setMessageId((int) messageId);
                    m.setText("‚è±Ô∏è –ó–∞–¥–∞–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ.");
                    try { execute(m); } catch (TelegramApiException ignored) {}
                    return;
                }
                if (rewardedSet(chatId).contains(task.getChatId())) {
                    try {
                        execute(org.telegram.telegrambots.meta.api.methods.AnswerCallbackQuery.builder()
                                .callbackQueryId(update.getCallbackQuery().getId())
                                .text("–í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –Ω–∞–≥—Ä–∞–¥—É –∑–∞ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª.")
                                .showAlert(false)
                                .build());
                    } catch (TelegramApiException ignored) {}
                    EditMessageText m2 = new EditMessageText();
                    m2.setChatId(String.valueOf(chatId));
                    m2.setMessageId((int) messageId);
                    m2.setText("‚è±Ô∏è –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª —É–∂–µ –±—ã–ª–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∞ —Ä–∞–Ω–µ–µ.");
                    try { execute(m2); } catch (TelegramApiException ignored) {}
                    return;
                }
                boolean subscribed = false;
                try {
                    var member = execute(new org.telegram.telegrambots.meta.api.methods.groupadministration.GetChatMember(String.valueOf(task.getChatId()), userId));
                    String status = member.getStatus();
                    subscribed = "member".equals(status) || "administrator".equals(status) || "creator".equals(status);
                } catch (TelegramApiException e) {
                    log.warn("GetChatMember –ø–æ chatId={} –¥–ª—è userId={} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {}",
                            task.getChatId(), userId, e.getMessage());

                    if (task.getUserName() != null && !task.getUserName().isBlank()) {
                        try {
                            var member2 = execute(new org.telegram.telegrambots.meta.api.methods.groupadministration.GetChatMember("@" + task.getUserName().replaceFirst("^@", ""), userId));
                            String status2 = member2.getStatus();
                            subscribed = "member".equals(status2) || "administrator".equals(status2) || "creator".equals(status2);
                        } catch (TelegramApiException e2) {
                            log.warn("GetChatMember –ø–æ username=@{} –¥–ª—è userId={} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {}",
                                    task.getUserName(), userId, e2.getMessage());
                        }
                    }
                }
                if (!subscribed) {
                    // –ù–ï –ü–û–î–ü–ò–°–ê–ù ‚Äî —Å–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –ù–ï –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å
                    try {
                        execute(org.telegram.telegrambots.meta.api.methods.AnswerCallbackQuery.builder()
                                .callbackQueryId(update.getCallbackQuery().getId())
                                .text("‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ü–æ–¥–ø–∏—à–∏—Å—å –∏ –∂–º–∏ ¬´–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å¬ª.")
                                .showAlert(false)
                                .build());
                        EditMessageText m = new EditMessageText();
                        m.setChatId(String.valueOf(chatId));
                        m.setMessageId((int) messageId);
                        m.setText("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å¬ª –µ—â—ë —Ä–∞–∑.");
                        execute(m);
                    } catch (TelegramApiException ignored) {}
                    return;
                }
                // 4) –ø–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ ‚Äî –Ω–∞—á–∏—Å–ª—è–µ–º –û–î–ò–ù –†–ê–ó –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–∫—É
                u.setBalance(java.util.Optional.ofNullable(u.getBalance()).orElse(0) + 1);
                u.setActiveTask(null); // –±–æ–ª—å—à–µ –Ω–µ–ª—å–∑—è –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —ç—Ç–æ –∂–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ
                userRepository.save(u);

                rewardedSet(chatId).add(task.getChatId());
                // —É–º–µ–Ω—å—à–∞–µ–º —Ü–µ–ª—å/—É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ —É–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å, –µ—Å–ª–∏ —Ü–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞
                try {
                    java.lang.reflect.Method getCur = null, setCur = null;
                    try {
                        getCur = TaskLink.class.getMethod("getCurrentSubs");
                        setCur = TaskLink.class.getMethod("setCurrentSubs", Long.class);
                    } catch (NoSuchMethodException ignored) {}
                    if (getCur != null && setCur != null) {
                        Long current = (Long) getCur.invoke(task);
                        long newCur = (current == null ? 0L : current) + 1L;
                        setCur.invoke(task, newCur);
                        Long target = task.getTargetSubs() == null ? 0L : task.getTargetSubs();
                        if (newCur >= target && target > 0L) {
                            taskRepository.delete(task);
                        } else {
                            taskRepository.save(task);
                        }
                    } else {
                        long left = java.util.Optional.ofNullable(task.getTargetSubs()).orElse(0L) - 1L;
                        if (left <= 0) {
                            taskRepository.delete(task);
                        } else {
                            task.setTargetSubs(left);
                            taskRepository.save(task);
                        }
                    }
                } catch (Exception e) {
                    // –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –±–µ–∑ –ø–∞–¥–µ–Ω–∏—è
                    try { taskRepository.save(task); } catch (Exception ignored) {}
                }
                try {
                    execute(org.telegram.telegrambots.meta.api.methods.AnswerCallbackQuery.builder()
                            .callbackQueryId(update.getCallbackQuery().getId())
                            .text("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ! –ù–∞—á–∏—Å–ª–µ–Ω–æ +1‚≠êÔ∏è")
                            .showAlert(false)
                            .build());
                    EditMessageText m = new EditMessageText();
                    m.setChatId(String.valueOf(chatId));
                    m.setMessageId((int) messageId);
                    m.setText("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –ù–∞—á–∏—Å–ª–µ–Ω–æ +1‚≠êÔ∏è\n\n" +
                            " ‚ùó\uFE0F–ù–µ –æ—Ç–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –æ—Ç –∫–∞–Ω–∞–ª–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ –∫–∞–∫ –º–∏–Ω–∏–º—É–º 7 –¥–Ω–µ–π. –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —à—Ç—Ä–∞—Ñ –∏–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∞–∫–∫–∞—É–Ω—Ç–∞.");
                    execute(m);
                } catch (TelegramApiException ignored) {}
                // –ø–æ–∫–∞–∑–∞—Ç—å –°–õ–ï–î–£–Æ–©–ï–ï –∑–∞–¥–∞–Ω–∏–µ
                taskCommandRecieved(chatId, update.getCallbackQuery().getFrom().getUserName());
            }
            else if (callbackData.equals("SKIP_TASK_BUTTON")) {
                // —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å—Ç—Ä–µ–≤–∞—Ç—å –Ω–∞ —Å—Ç–∞—Ä–æ–º
                userRepository.findById(chatId).ifPresent(u -> {
                    u.setActiveTask(null);
                    userRepository.save(u);
                });
                try {
                    EditMessageText m = new EditMessageText();
                    m.setChatId(String.valueOf(chatId));
                    m.setMessageId((int) messageId);
                    m.setText("‚è© –ü–æ–∫–∞–∑–∞–ª –¥—Ä—É–≥–æ–µ –∑–∞–¥–∞–Ω–∏–µ");
                    execute(m);
                } catch (TelegramApiException ignored) {}
                taskCommandRecieved(chatId, update.getCallbackQuery().getFrom().getUserName());
            }
            else if (callbackData.equals("MY_TASKS_BACK")) {
                messageId = update.getCallbackQuery().getMessage().getMessageId();

                org.telegram.telegrambots.meta.api.methods.updatingmessages.DeleteMessage del = new org.telegram.telegrambots.meta.api.methods.updatingmessages.DeleteMessage();
                del.setChatId(String.valueOf(chatId));
                del.setMessageId((int) messageId);
                try {
                    execute(del);
                } catch (org.telegram.telegrambots.meta.exceptions.TelegramApiException e) {
                    log.error("Callback –û–®–ò–ë–ö–ê: MY_TASKS_BACK (delete) ---> " + e.getMessage());
                }
                profileCommandRecieved(chatId, update.getCallbackQuery().getFrom().getUserName());
            }
            else if (callbackData.equals("25_STARS")) {
                String text = "test 25";
                EditMessageText message = new EditMessageText();
                message.setChatId(String.valueOf(chatId));
                message.setText(text);
                message.setMessageId((int) messageId);
                try {
                    execute(message);
                }
                catch (TelegramApiException e) {
                    log.error("Callback –û–®–ò–ë–ö–ê: 25_STARS ---> " + e.getMessage());
                }
            }
            else if (callbackData.equals("50_STARS")) {
                String text = "test 50";
                EditMessageText message = new EditMessageText();
                message.setChatId(String.valueOf(chatId));
                message.setText(text);
                message.setMessageId((int) messageId);
                try {
                    execute(message);
                }
                catch (TelegramApiException e) {
                    log.error("Callback –û–®–ò–ë–ö–ê: 50_STARS ---> " + e.getMessage());
                }
            }
            else if (callbackData.equals("100_STARS")) {
                String text = "test 100";
                EditMessageText message = new EditMessageText();
                message.setChatId(String.valueOf(chatId));
                message.setText(text);
                message.setMessageId((int) messageId);
                try {
                    execute(message);
                }
                catch (TelegramApiException e) {
                    log.error("Callback –û–®–ò–ë–ö–ê: 100_STARS ---> " + e.getMessage());
                }
            }
            else if (callbackData.equals("200_STARS")) {
                String text = "test 200";
                EditMessageText message = new EditMessageText();
                message.setChatId(String.valueOf(chatId));
                message.setText(text);
                message.setMessageId((int) messageId);
                try {
                    execute(message);
                }
                catch (TelegramApiException e) {
                    log.error("Callback –û–®–ò–ë–ö–ê: 200_STARS ---> " + e.getMessage());
                }
            }
            if ("CONFIRM_TASK".equals(callbackData)) {
                TaskLink task = pendingConfirmations.get(chatId);
                if (task != null) {
                    User user = userRepository.findById(chatId).orElseThrow();
                    if (user.getAdsBalance() >= task.getTargetSubs()) {
                        user.setAdsBalance((int) (user.getAdsBalance() - task.getTargetSubs()));
                        userRepository.save(user);
                        taskRepository.save(task);
                        EditMessageText message = new EditMessageText();
                        message.setChatId(String.valueOf(chatId));
                        message.setMessageId(update.getCallbackQuery().getMessage().getMessageId());
                        message.setText("‚úÖ –ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ –∏ –æ–ø–ª–∞—á–µ–Ω–æ!");
                        try {
                            execute(message);
                        }
                        catch (TelegramApiException e) {
                            log.error("Callback –û–®–ò–ë–ö–ê: 100_STARS ---> " + e.getMessage());
                        }
                    } else {
                        sendMessage(chatId, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!");
                    }
                }
                pendingConfirmations.remove(chatId);
            }
            else if ("CANCEL_TASK".equals(callbackData)) {
                pendingConfirmations.remove(chatId);
                EditMessageText message = new EditMessageText();
                message.setChatId(String.valueOf(chatId));
                message.setMessageId(update.getCallbackQuery().getMessage().getMessageId());
                message.setText("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ");
                try {
                    execute(message);
                }
                catch (TelegramApiException e) {
                    log.error("Callback –û–®–ò–ë–ö–ê: 100_STARS ---> " + e.getMessage());
                }
            }
            // 1) –†–µ–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ —Å –æ–±—ã—á–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ ‚Üí —Ä–µ–∫–ª–∞–º–Ω—ã–π
            else if (callbackData.equals("TOPUP_FROM_BALANCE")) {
                String target = topupTarget.getOrDefault(chatId, "regular"); // "ad" –∏–ª–∏ "regular"
                Integer amount = topupAmount.get(chatId);

                // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å—É–º–º–∞ –µ—Å—Ç—å
                if (amount == null || amount <= 0) {
                    try {
                        execute(org.telegram.telegrambots.meta.api.methods.AnswerCallbackQuery.builder()
                                .callbackQueryId(update.getCallbackQuery().getId())
                                .text("–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É.")
                                .showAlert(false)
                                .build());
                    } catch (TelegramApiException ignored) {}
                    return;
                }

                // –ü–µ—Ä–µ–≤–æ–¥ —Å –æ–±—ã—á–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –∏–º–µ–µ—Ç —Å–º—ã—Å–ª –¢–û–õ–¨–ö–û –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ
                if (!"ad".equals(target)) {
                    try {
                        execute(org.telegram.telegrambots.meta.api.methods.AnswerCallbackQuery.builder()
                                .callbackQueryId(update.getCallbackQuery().getId())
                                .text("–≠—Ç–æ—Ç —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞.")
                                .showAlert(false)
                                .build());
                    } catch (TelegramApiException ignored) {}
                    return;
                }

                User user = userRepository.findById(chatId).orElse(null);
                if (user == null) return;

                int regular = java.util.Optional.ofNullable(user.getBalance()).orElse(0);
                int ad = java.util.Optional.ofNullable(user.getAdsBalance()).orElse(0);

                if (regular < amount) {
                    // –¢–∏—Ö–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ + —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–±–µ–∑ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç)
                    try {
                        execute(org.telegram.telegrambots.meta.api.methods.AnswerCallbackQuery.builder()
                                .callbackQueryId(update.getCallbackQuery().getId())
                                .text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ‚≠ê –Ω–∞ –æ–±—ã—á–Ω–æ–º –±–∞–ª–∞–Ω—Å–µ.")
                                .showAlert(false)
                                .build());
                    } catch (TelegramApiException ignored) {}

                    org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText em =
                            new org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText();
                    em.setChatId(String.valueOf(chatId));
                    em.setMessageId((int) messageId);
                    em.setText("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ‚≠ê –Ω–∞ –æ–±—ã—á–Ω–æ–º –±–∞–ª–∞–Ω—Å–µ.\n" +
                            "–ë–∞–ª–∞–Ω—Å: " + regular + "‚≠êÔ∏è\n" +
                            "–°—É–º–º–∞: " + amount + "‚≠êÔ∏è\n\n" +
                            "–í–≤–µ–¥–∏—Ç–µ –º–µ–Ω—å—à—É—é —Å—É–º–º—É –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ ‚Äî /cancel");
                    try { execute(em); } catch (TelegramApiException ignored) {}
                    return;
                }

                // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥
                user.setBalance(regular - amount);
                user.setAdsBalance(ad + amount);
                userRepository.save(user);

                // –ß–∏—Å—Ç–∏–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                topupAmount.remove(chatId);
                topupTarget.remove(chatId);
                userStates.remove(chatId);

                // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText em =
                        new org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText();
                em.setChatId(String.valueOf(chatId));
                em.setMessageId((int) messageId);
                em.setText("‚úÖ –£—Å–ø–µ—à–Ω–æ!\n" +
                        "–ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ: " + amount + "‚≠êÔ∏è —Å –æ–±—ã—á–Ω–æ–≥–æ –Ω–∞ —Ä–µ–∫–ª–∞–º–Ω—ã–π.\n\n" +
                        "–û–±—ã—á–Ω—ã–π: " + user.getBalance() + "‚≠êÔ∏è\n" +
                        "–†–µ–∫–ª–∞–º–Ω—ã–π: " + user.getAdsBalance() + "‚≠êÔ∏è");
                try { execute(em); } catch (TelegramApiException ignored) {}
            }
            else if (callbackData.equals("TOPUP_FROM_BALANCE")
                    || callbackData.equals("TOPUP_TGSTARS")
                    || callbackData.equals("TOPUP_SBP")
                    || callbackData.equals("TOPUP_CRYPTO")
                    || callbackData.equals("TOPUP_TON")) {

                if ("TOPUP_TGSTARS".equals(callbackData)) {
                    Integer amount = topupAmount.get(chatId);
                    if (amount == null || amount < 50) {
                        sendMessage(chatId, "–ú–∏–Ω–∏–º—É–º: 50‚≠êÔ∏è. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å–Ω–æ–≤–∞.\n\n–û—Ç–º–µ–Ω–∏—Ç—å ‚Äî /cancel");
                        return;
                    }
                    String payload = "AD_TOPUP:" + chatId + ":" + amount;
                    sendStarsInvoiceRaw(chatId, amount, payload, "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞",
                            "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ " + amount + "‚≠êÔ∏è —á–µ—Ä–µ–∑ Telegram Stars");
                    return;
                }

                String target = topupTarget.getOrDefault(chatId, "regular"); // "ad" –∏–ª–∏ "regular"
                Integer amount = topupAmount.get(chatId);
                if (amount == null) amount = 0;

                String methodName =
                        "TOPUP_FROM_BALANCE".equals(callbackData) ? "–° –æ–±—ã—á–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞" :
                                "TOPUP_TGSTARS".equals(callbackData)     ? "Telegram Stars" :
                                        "TOPUP_SBP".equals(callbackData)         ? "–†—É–±–ª–∏ (–°–ë–ü)" :
                                                "TOPUP_TON".equals(callbackData)         ? "TON" :
                                                        "–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã";


                String title = "üí≥ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞";
                if ("regular".equals(target)) title = "üí∏ –ü–æ–∫—É–ø–∫–∞ –ó–≤—ë–∑–¥";

                String summary = title + "\n\n" +
                        "–°–ø–æ—Å–æ–±: " + methodName + "\n" +
                        "–°—É–º–º–∞: " + amount + "‚≠êÔ∏è\n\n" +
                        "–ü–ª–∞—Ç—ë–∂–Ω—ã–π —à–ª—é–∑ –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω.\n" +
                        "–û—Ç–º–µ–Ω–∏—Ç—å ‚Äî /cancel";

                org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText em =
                        new org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText();
                em.setChatId(String.valueOf(chatId));
                em.setMessageId((int) messageId);
                em.setText(summary);

                try { execute(em); } catch (TelegramApiException ignored) {}

                // –ß–∏—Å—Ç–∏–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                topupAmount.remove(chatId);
                topupTarget.remove(chatId);
                userStates.remove(chatId);
            }
        }
        if (update.hasMessage() && update.getMessage().getForwardFromChat() != null) {
            long chatId = update.getMessage().getFrom().getId();
            if ("–æ–∂–∏–¥–∞–Ω–∏–µ_–ø–æ—Å—Ç–∞".equals(userStates.get(chatId))) {
                Chat channel = update.getMessage().getForwardFromChat();
                channelIdCache.put(chatId, channel.getId());
                String username = channel.getUserName(); // –ù–ï title!
                if (username == null || username.isBlank()) {
                    sendMessage(chatId, "‚ùóÔ∏è–£ —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –Ω–µ—Ç @username. –î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –Ω—É–∂–Ω–∞ invite-—Å—Å—ã–ª–∫–∞ t.me/‚Ä¶ –∏–ª–∏ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–∞–π—Ç–∞.");
                    return;
                }
                String link = "https://t.me/" + username.replaceFirst("^@", "");

                channelCache.put(chatId, link);
                channelCache.put(chatId, username.replaceFirst("^@", ""));
                channelIdCache.put(chatId, channel.getId());

                userStates.put(chatId, "–æ–∂–∏–¥–∞–Ω–∏–µ_—á–∏—Å–ª–∞");
                sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤\n\n–ú–∏–Ω–∏–º—É–º: 200\n\n–¶–µ–Ω–∞ –∑–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞: 1‚≠êÔ∏è\n\n–û—Ç–º–µ–Ω–∏—Ç—å ‚Äî /cancel");
                return;
            }
        }
        if (update.hasMessage() && update.getMessage().hasText()) {
            long chatId = update.getMessage().getChatId();
            String text = update.getMessage().getText();

            // –±—ã—Å—Ç—Ä—ã–π –ø–µ—Ä–µ—Ö–≤–∞—Ç –≤–≤–æ–¥–∞ —Å—É–º–º—ã –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è/–ø–æ–∫—É–ø–∫–∏
            if (STATE_WAIT_AMOUNT.equals(userStates.get(chatId))) {
                // –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª —á–∏—Å—Ç–æ —á–∏—Å–ª–æ ‚Äî –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—É–º–º—É –∑–¥–µ—Å—å –∏ –≤—ã—Ö–æ–¥–∏–º
                if (text.trim().matches("\\d+")) {
                    int amount = Integer.parseInt(text.trim());

                    if (amount < 50) {
                        sendMessage(chatId,
                                "‚ùóÔ∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ ‚Äî 50‚≠êÔ∏è\n\n" +
                                        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å–Ω–æ–≤–∞.\n\n" +
                                        "–û—Ç–º–µ–Ω–∏—Ç—å ‚Äî /cancel");
                        return;
                    }
                    topupAmount.put(chatId, amount);

                    String title = "üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:";
                    String target = topupTarget.getOrDefault(chatId, "regular");
                    if ("regular".equals(target)) {
                        title = "üí∏ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–∫—É–ø–∫–∏:";
                    }

                    SendMessage msg = new SendMessage();
                    msg.setChatId(String.valueOf(chatId));
                    msg.setText(title + "\n\n" +
                            "–°—É–º–º–∞: " + amount + "‚≠êÔ∏è\n\n" +
                            "–û—Ç–º–µ–Ω–∏—Ç—å ‚Äî /cancel");
                    msg.setReplyMarkup(buildTopupMethodsKb(target));

                    try { execute(msg); }
                    catch (TelegramApiException e) { log.error("wait amount -> methods error: " + e.getMessage()); }
                    return; // –≤–∞–∂–Ω–æ: –¥–∞–ª—å—à–µ –Ω–µ –∏–¥—ë–º
                }
            }
            if ("–æ–∂–∏–¥–∞–Ω–∏–µ_—á–∏—Å–ª–∞".equals(userStates.get(chatId))) {
                Chat channel = update.getMessage().getForwardFromChat();
                try {
                    long subsCount = Long.parseLong(text);
                    if (subsCount < 200) {
                        sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤\n\n–ú–∏–Ω–∏–º—É–º: 200\n\n–¶–µ–Ω–∞ –∑–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞: 1‚≠êÔ∏è\n\n–û—Ç–º–µ–Ω–∏—Ç—å ‚Äî /cancel");
                        return;
                    }

                    User user = userRepository.findById(chatId).orElseThrow();
                    if (user.getAdsBalance() < subsCount) {
                        sendMessage(chatId, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥ –Ω–∞ —Ä–µ–∫–ª–∞–º–Ω–æ–º –±–∞–ª–∞–Ω—Å–µ!\n–í–∞—à –±–∞–ª–∞–Ω—Å: " + user.getAdsBalance() + "‚≠êÔ∏è");
                        return;
                    }
                    Long channelIdForTask = channelIdCache.get(chatId);
                    String link = channelCache.get(chatId);

                    if (channelIdForTask == null || link == null || link.isBlank()) {
                        sendMessage(chatId, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞–Ω–∞–ª. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: ¬´–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ¬ª.");
                        return;
                    }
                    TaskLink task = new TaskLink();
                    task.setChatId(channelIdCache.get(chatId));
                    task.setUserName(user.getUserName());
                    task.setLink(link);
                    task.setTargetSubs(subsCount);
                    task.setCurrentSubs(0L);

                    String messageText = String.format("üìù –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–¥–∞–Ω–∏–µ:\n\n–ö–∞–Ω–∞–ª: %s\n–ß–∏—Å–ª–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: %d\n\n–ö –æ–ø–ª–∞—Ç–µ: %d‚≠êÔ∏è", link, subsCount, subsCount);

                    InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
                    InlineKeyboardButton confirmBtn = new InlineKeyboardButton();
                    confirmBtn.setText("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å");
                    confirmBtn.setCallbackData("CONFIRM_TASK");
                    InlineKeyboardButton cancelBtn = new InlineKeyboardButton();
                    cancelBtn.setText("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å");
                    cancelBtn.setCallbackData("CANCEL_TASK");
                    java.util.List<java.util.List<InlineKeyboardButton>> keyboard = new java.util.ArrayList<>();
                    keyboard.add(java.util.Collections.singletonList(confirmBtn));
                    keyboard.add(java.util.Collections.singletonList(cancelBtn));
                    markup.setKeyboard(keyboard);

                    SendMessage confirmMsg = new SendMessage();
                    confirmMsg.setChatId(String.valueOf(chatId));
                    confirmMsg.setText(messageText);
                    confirmMsg.setReplyMarkup(markup);
                    try {
                        execute(confirmMsg);
                        pendingConfirmations.put(chatId, task);
                        userStates.remove(chatId);
                        channelCache.remove(chatId);
                        channelIdCache.remove(chatId); // –Ω–µ –∑–∞–±—ã–≤–∞–µ–º –æ—á–∏—Å—Ç–∏—Ç—å id
                    } catch (TelegramApiException e) {
                        log.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: " + e.getMessage());
                    }
                } catch (NumberFormatException e) {
                    sendMessage(chatId, "‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!");
                } catch (Exception e) {
                    log.error("–û—à–∏–±–∫–∞: " + e.getMessage());
                    sendMessage(chatId, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ");
                }
            }
        }
    }

    private boolean sendStarsInvoiceRaw(long chatId, int starsAmount, String payload, String title, String description) {
        java.net.HttpURLConnection conn = null;
        try {
            // –ï—Å–ª–∏ —É–≤–∏–¥–∏—à—å PRICE_TOTAL_AMOUNT_INVALID ‚Äî –∑–∞–º–µ–Ω–∏ –Ω–∞: int units = starsAmount * 100;
            int units = starsAmount;

            String url = "https://api.telegram.org/bot" + getBotToken() + "/sendInvoice";
            String json = "{"
                    + "\"chat_id\":\"" + chatId + "\","
                    + "\"title\":" + toJson(title) + ","
                    + "\"description\":" + toJson(description) + ","
                    + "\"payload\":" + toJson(payload) + ","
                    + "\"currency\":\"XTR\","
                    + "\"start_parameter\":\"ad_topup_" + starsAmount + "\","
                    + "\"prices\":[{\"label\":\"Stars\",\"amount\":" + units + "}]"
                    + "}";

            java.net.URL u = new java.net.URL(url);
            conn = (java.net.HttpURLConnection) u.openConnection();
            conn.setRequestMethod("POST");
            conn.setDoOutput(true);
            conn.setRequestProperty("Content-Type", "application/json; charset=utf-8");
            try (java.io.OutputStream os = conn.getOutputStream()) {
                os.write(json.getBytes(java.nio.charset.StandardCharsets.UTF_8));
            }

            int code = conn.getResponseCode();
            java.io.InputStream is = (code >= 200 && code < 300) ? conn.getInputStream() : conn.getErrorStream();
            String resp = new String(is.readAllBytes(), java.nio.charset.StandardCharsets.UTF_8);

            if (code >= 200 && code < 300) {
                log.info("Stars invoice OK: {}", resp);
                return true;
            } else {
                log.error("Stars invoice FAIL [{}]: {}", code, resp);
                String human = "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á—ë—Ç. –ö–æ–¥: " + code;
                try {
                    int i = resp.indexOf("\"description\":\"");
                    if (i >= 0) {
                        int j = resp.indexOf('"', i + 15);
                        if (j > i) human += "\n" + resp.substring(i + 15, j);
                    }
                } catch (Exception ignored) {}
                sendMessage(chatId, human);
                return false;
            }
        } catch (Exception e) {
            log.error("sendStarsInvoiceRaw error", e);
            sendMessage(chatId, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á—ë—Ç: " + e.getMessage());
            return false;
        } finally {
            if (conn != null) conn.disconnect();
        }
    }

    private String toJson(String s) {
        if (s == null) return "null";
        String escaped = s.replace("\\","\\\\").replace("\"","\\\"").replace("\n","\\n").replace("\r","\\r");
        return "\"" + escaped + "\"";
    }

    private long safeCurrent(TaskLink t) {
        try {
            java.lang.reflect.Method m = TaskLink.class.getMethod("getCurrentSubs");
            Object v = m.invoke(t);
            if (v instanceof Long l) return l;
        } catch (Exception ignored) {}
        return 0L;
    }

    private String generateReferralCode() {
        String chars = "AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz0123456789";
        StringBuilder code = new StringBuilder();
        for (int i = 0; i < 8; i++) {
            code.append(chars.charAt((int) (Math.random() * chars.length())));
        }
        return code.toString();
    }

    private void processReferralCode(long chatId, String refCode) {
        Optional<User> userOpt = userRepository.findById(chatId);
        if (userOpt.isEmpty()) return;

        User user = userOpt.get();

        if (user.getReferredBy() != null) return;

        if (refCode.equals(user.getRefCode())) return;

        Optional<User> inviterOpt = userRepository.findByRefCode(refCode);
        if (inviterOpt.isEmpty()) return;

        User inviter = inviterOpt.get();

        user.setReferredBy(refCode);
        userRepository.save(user);

        inviter.setBalance(inviter.getBalance() + 2);
        userRepository.save(inviter);

        sendMessage(chatId, "‚úÖ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø—Ä–∏–Ω—è—Ç! –í—ã –ø–æ–ª—É—á–∏–ª–∏ +2 ‚≠êÔ∏è");
        sendMessage(inviter.getChatId(), "üéâ –£ –≤–∞—Å –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª! +2 ‚≠êÔ∏è –Ω–∞ –±–∞–ª–∞–Ω—Å");
    }
    private String encForTelegram(String s) {
        try {
            return java.net.URLEncoder.encode(s, java.nio.charset.StandardCharsets.UTF_8.name())
                    .replace("+", "%20");
        } catch (Exception e) {
            return s;
        }
    }

    private InlineKeyboardMarkup buildTopupMethodsKb(String target) {
        InlineKeyboardMarkup kb = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        if ("regular".equals(target)) {
            // üí∏ –î—ë—à–µ–≤–æ –∫—É–ø–∏—Ç—å –ó–≤—ë–∑–¥—ã
            InlineKeyboardButton ton = new InlineKeyboardButton();
            ton.setText("TON");
            ton.setCallbackData("TOPUP_TON");

            InlineKeyboardButton sbp = new InlineKeyboardButton();
            sbp.setText("–†—É–±–ª–∏ (–°–ë–ü)");
            sbp.setCallbackData("TOPUP_SBP");

            InlineKeyboardButton crypto = new InlineKeyboardButton();
            crypto.setText("–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã");
            crypto.setCallbackData("TOPUP_CRYPTO");

            rows.add(List.of(ton));
            rows.add(List.of(sbp));
            rows.add(List.of(crypto));
        } else {
            // üí≥ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
            InlineKeyboardButton fromBalance = new InlineKeyboardButton();
            fromBalance.setText("–° –æ–±—ã—á–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞");
            fromBalance.setCallbackData("TOPUP_FROM_BALANCE");

            InlineKeyboardButton tgStars = new InlineKeyboardButton();
            tgStars.setText("Telegram Stars");
            tgStars.setCallbackData("TOPUP_TGSTARS");

            InlineKeyboardButton sbp = new InlineKeyboardButton();
            sbp.setText("–†—É–±–ª–∏ (–°–ë–ü)");
            sbp.setCallbackData("TOPUP_SBP");

            InlineKeyboardButton crypto = new InlineKeyboardButton();
            crypto.setText("–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã");
            crypto.setCallbackData("TOPUP_CRYPTO");

            rows.add(List.of(fromBalance));
            rows.add(List.of(tgStars));
            rows.add(List.of(sbp));
            rows.add(List.of(crypto));
        }

        kb.setKeyboard(rows);
        return kb;
    }

    private void startTopupFlow(long chatId, String username, String target) {
        topupTarget.put(chatId, target);
        userStates.put(chatId, STATE_WAIT_AMOUNT);

        String title = "üí≥ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞";
        if ("regular".equals(target)) {
            title = "üí∏ –î—ë—à–µ–≤–æ –∫—É–ø–∏—Ç—å –ó–≤—ë–∑–¥—ã";
        }

        String text = title + "\n\n" +
                "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:\n\n" +
                "–ú–∏–Ω–∏–º—É–º: 50‚≠êÔ∏è\n\n" +
                "–û—Ç–º–µ–Ω–∏—Ç—å ‚Äî /cancel";

        org.telegram.telegrambots.meta.api.methods.send.SendMessage msg = new org.telegram.telegrambots.meta.api.methods.send.SendMessage();
        msg.setChatId(String.valueOf(chatId));
        msg.setText(text);

        try {
            execute(msg);
        } catch (org.telegram.telegrambots.meta.exceptions.TelegramApiException e) {
            log.error("startTopupFlow error: " + e.getMessage());
        }
    }

    private void resetTopupState(long chatId) {
        userStates.remove(chatId);
        topupTarget.remove(chatId);
        topupAmount.remove(chatId);
    }

    private void registerUser(Message msg) {
        if(userRepository.findById(msg.getChatId()).isEmpty()) {
            var chatId = msg.getChatId();
            var chat = msg.getChat();

            User user = new User();

            user.setChatId(chatId);
            user.setUserName(chat.getUserName());
            user.setRegisteredAt(new Timestamp(System.currentTimeMillis()));
            user.setBalance(1);
            user.setAdsBalance(0);
            user.setWithdrawnBalance(0);
            user.setRefCode(generateReferralCode());

            userRepository.save(user);
            log.info("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: " + user);
        }
    }

    private void startCommandRecieved(long chatId, String username) {
        SendMessage message = new SendMessage();

        Optional<User> userOpt = userRepository.findById(chatId);

        if (userOpt.isEmpty()) {
            sendMessage(chatId, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
            return;
        }

        User user = userOpt.get();
        int referralCount = userRepository.countByReferredBy(user.getRefCode());
        message.setChatId(String.valueOf(chatId));
        String botUsername = "tgstarschange_bot";
        String referralLink = "https://t.me/" + botUsername + "?start=" + user.getRefCode();

        message.setChatId(String.valueOf(chatId));
        message.setText("–ü–æ–ª—É—á–∞–π +2 ‚≠êÔ∏è –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞!\n\n" +
                "üìé –¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n" +
                referralLink + "\n\n" +
                "üéâ –ü—Ä–∏–≥–ª–∞—à–∞–π –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ —Å–≤–æ–∏—Ö –¥—Ä—É–∑–µ–π, –æ—Ç–ø—Ä–∞–≤–ª—è–π –µ—ë –≤–æ –≤—Å–µ —á–∞—Ç—ã –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –ó–≤—ë–∑–¥—ã!\n\n" +
                "–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –≤–∞–º–∏: " + referralCount);

        InlineKeyboardMarkup markupInLine = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rowsInLine = new ArrayList<>();
        List<InlineKeyboardButton> rowInLine = new ArrayList<>();

        var show_to_friends_button = new InlineKeyboardButton();
        show_to_friends_button.setText("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –¥—Ä—É–∑—å—è–º");

        String refLink = "https://t.me/" + botUsername + "?start=" + user.getRefCode();
        String shareText = "–ó–∞–ª–µ—Ç–∞–π! –ü–æ–ª—É—á–∞–π ‚≠ê –∑–∞ –ø–æ–¥–ø–∏—Å–∫–∏. –ú–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è: " + refLink;

        String url = "https://t.me/share/url?url=" + encForTelegram(refLink) + "&text=" + encForTelegram(shareText);

        show_to_friends_button.setUrl(url);

        rowInLine.add(show_to_friends_button);
        rowsInLine.add(rowInLine);

        markupInLine.setKeyboard(rowsInLine);
        message.setReplyMarkup(markupInLine);

        try {
            execute(message);
            sendMessage(chatId, "\uD83D\uDCAB");
        }
        catch (TelegramApiException e) {
            log.error("START –û–®–ò–ë–ö–ê: " + e.getMessage());
        }
        log.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: " + username + "\n" +
                "TelegramID:" + chatId + "\n" +
                "–∑–∞–ø—É—Å—Ç–∏–ª –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ –Ω–∞–∂–∞–ª ''‚≠ê\uFE0F –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –ó–≤—ë–∑–¥—ã''.");
    }

    private void suggestTaskCommandRecieved(long chatId, String username) {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText("\uD83D\uDCA1–¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –ó–≤—ë–∑–¥—ã –∑–∞ –ø—Ä–æ—Å—Ç—ã–µ –∑–∞–¥–∞–Ω–∏—è!");

        InlineKeyboardMarkup markupInLine = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rowsInLine = new ArrayList<>();
        List<InlineKeyboardButton> rowInLine = new ArrayList<>();

        var task_button = new InlineKeyboardButton();
        task_button.setText("\uD83D\uDC8E –í—ã–ø–æ–ª–Ω—è—Ç—å –ó–∞–¥–∞–Ω–∏—è");
        task_button.setCallbackData("TASK_BUTTON");

        rowInLine.add(task_button);
        rowsInLine.add(rowInLine);

        markupInLine.setKeyboard(rowsInLine);
        message.setReplyMarkup(markupInLine);
        try {
            execute(message);
        }
        catch (TelegramApiException e) {
            log.error("SUGGEST –û–®–ò–ë–ö–ê: " + e.getMessage());
        }
        log.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: " + username + "\n" +
                "TelegramID:" + chatId + "\n" +
                "–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ –Ω–∞—á–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è.");
    }

    private void profileCommandRecieved(long chatId, String username) {

        Optional<User> userOpt = userRepository.findById(chatId);

        if (userOpt.isEmpty()) {
            sendMessage(chatId, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
            return;
        }
        User user = userOpt.get();

        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText("\uD83D\uDDA5 –ú–æ–π –ö–∞–±–∏–Ω–µ—Ç\n" +
                "\n" +
                "    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: " + username + "\n" +
                "    –ë–∞–ª–∞–Ω—Å:\n" +
                "    –û–±—ã—á–Ω—ã–π: " + user.getBalance() + " ‚≠ê\uFE0F\n" +
                "    –†–µ–∫–ª–∞–º–Ω—ã–π: " + user.getAdsBalance() + " ‚≠ê\uFE0F\n" +
                "\n" +
                "    –í—ã–≤–µ–¥–µ–Ω–æ: " + user.getWithdrawnBalance() + " ‚≠ê\uFE0F\n" +
                "\n" +
                "    ‚ùó\uFE0F–ó–≤—ë–∑–¥—ã –≤—ã–≤–æ–¥—è—Ç—Å—è —Å –æ–±—ã—á–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞.\n" +
                "\n" +
                "    \uD83D\uDC65 –•–æ—á–µ—à—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤ —Å–≤–æ–π –ö–∞–Ω–∞–ª? –ñ–º–∏ ¬´–°–æ–∑–¥–∞—Ç—å –ó–∞–¥–∞–Ω–∏–µ¬ª –∏ –æ–±–º–µ–Ω–∏–≤–∞–π –∑–≤—ë–∑–¥—ã –Ω–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤!");

        InlineKeyboardMarkup markupInLine = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rowsInLine = new ArrayList<>();

        List<InlineKeyboardButton> rowInLine1 = new ArrayList<>();
        var my_tasks_button = new InlineKeyboardButton();
        my_tasks_button.setText("\uD83D\uDCCB –ú–æ–∏ –∑–∞–¥–∞–Ω–∏—è");
        my_tasks_button.setCallbackData("MY_TASKS_BUTTON");
        rowInLine1.add(my_tasks_button);
        rowsInLine.add(rowInLine1);

        List<InlineKeyboardButton> rowInLine2 = new ArrayList<>();
        var create_task_button = new InlineKeyboardButton();
        create_task_button.setText("‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ");
        create_task_button.setCallbackData("CREATE_TASK_BUTTON");
        rowInLine2.add(create_task_button);
        rowsInLine.add(rowInLine2);

        List<InlineKeyboardButton> rowInLine3 = new ArrayList<>();
        var ads_balance_button = new InlineKeyboardButton();
        ads_balance_button.setText("\uD83D\uDCB3 –ü–æ–ø–æ–ª–Ω–∏—Ç—å —Ä–µ–∫–ª–∞–º–Ω—ã–π –±–∞–ª–∞–Ω—Å");
        ads_balance_button.setCallbackData("ADS_BALANCE_BUTTON");
        rowInLine3.add(ads_balance_button);
        rowsInLine.add(rowInLine3);

        markupInLine.setKeyboard(rowsInLine);
        message.setReplyMarkup(markupInLine);
        try {
            execute(message);
        }
        catch (TelegramApiException e) {
            log.error("PROFILE –û–®–ò–ë–ö–ê: " + e.getMessage());
        }
        log.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: " + username + "\n" +
                "TelegramID:" + chatId + "\n" +
                "–∑–∞–ø—É—Å—Ç–∏–ª –∫–æ–º–∞–Ω–¥—É /profile –∏–ª–∏ –Ω–∞–∂–∞–ª ''\uD83D\uDC65 –ö—É–ø–∏—Ç—å –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤''.");
    }

    private void taskCommandRecieved(long chatId, String username) {
        Optional<User> optUser = userRepository.findById(chatId);
        TaskLink chosenTask = null;

        if (optUser.isPresent()) {
            String active = optUser.get().getActiveTask();
            if (active != null && !active.isBlank()) {
                try {
                    long activeId = Long.parseLong(active);
                    Optional<TaskLink> activeTaskOpt = taskRepository.findById(activeId);
                    if (activeTaskOpt.isPresent()) {
                        TaskLink t = activeTaskOpt.get();
                        if (normalizeLink(t.getLink()) != null) {
                            chosenTask = t; // –∞–∫—Ç–∏–≤–∫–∞ –≤–∞–ª–∏–¥–Ω–∞—è
                        } else {
                            // –∞–∫—Ç–∏–≤–∫–∞ –±–∏—Ç–∞—è ‚Äî –æ—á–∏—â–∞–µ–º –∏ –ø–æ–π–¥—ë–º –Ω–∏–∂–µ –ø–æ–¥–±–∏—Ä–∞—Ç—å –¥—Ä—É–≥—É—é
                            optUser.get().setActiveTask(null);
                            userRepository.save(optUser.get());
                        }
                    } else {
                        // –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–ø–∏—Å—å –∏—Å—á–µ–∑–ª–∞ ‚Äî –æ—á–∏—â–∞–µ–º
                        optUser.get().setActiveTask(null);
                        userRepository.save(optUser.get());
                    }
                } catch (NumberFormatException ignored) {}
            }
        }

        if (chosenTask == null) {
            java.util.List<TaskLink> all = new java.util.ArrayList<>();
            taskRepository.findAll().forEach(all::add);

            if (all.isEmpty()) {
                sendMessage(chatId, "\uD83D\uDE14 –ó–∞–¥–∞–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.");
                return;
            }

            // –∫–∞–Ω–∞–ª—ã, –∑–∞ –∫–æ—Ç–æ—Ä—ã–µ —ç—Ç–æ–º—É —é–∑–µ—Ä—É —É–∂–µ –ø–ª–∞—Ç–∏–ª–∏
            java.util.Set<Long> done = rewardedSet(chatId);

            TaskLink picked = null;
            for (int i = 0; i < all.size(); i++) {
                TaskLink cand = all.get(java.util.concurrent.ThreadLocalRandom.current().nextInt(all.size()));
                String linkOk = normalizeLink(cand.getLink());
                if (linkOk != null && !done.contains(cand.getChatId())) {
                    picked = cand;
                    break;
                }
            }

            if (picked == null) {
                sendMessage(chatId, "\uD83D\uDE14 –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –∑–∞–¥–∞–Ω–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –∑–∞–≥–ª—è–Ω–∏—Ç–µ –ø–æ–∑–∂–µ!\n");
                return;
            }

            chosenTask = picked;

            // –∑–∞–ø–æ–º–Ω–∏–º –∞–∫—Ç–∏–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ
            TaskLink finalChosenTask = chosenTask;
            userRepository.findById(chatId).ifPresent(u -> {
                u.setActiveTask(String.valueOf(finalChosenTask.getChatId()));
                userRepository.save(u);
            });
        }

        // 3) —Å—Å—ã–ª–∫–∞ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –≤–∞–ª–∏–¥–Ω–∞—è (–º—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–ª–∏)
        String openUrl = normalizeLink(chosenTask.getLink());

        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(
                "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª " + openUrl + " –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å¬ª\n\n" +
                        "–í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ: +1‚≠êÔ∏è\n\n" +
                        "–£ –≤–∞—Å –µ—Å—Ç—å 5 –º–∏–Ω—É—Ç –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è!");

        InlineKeyboardMarkup markupInLine = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rowsInLine = new ArrayList<>();

        List<InlineKeyboardButton> rowInLine1 = new ArrayList<>();
        InlineKeyboardButton go_to_channel_button = new InlineKeyboardButton();
        go_to_channel_button.setText("\uD83D\uDC5E –ü–µ—Ä–µ–π—Ç–∏");
        go_to_channel_button.setUrl(openUrl); // URL-–∫–Ω–æ–ø–∫–∞ ‚Äî –ë–ï–ó callbackData
        rowInLine1.add(go_to_channel_button);

        InlineKeyboardButton done_button = new InlineKeyboardButton();
        done_button.setText("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å");
        done_button.setCallbackData("DONE_BUTTON");
        rowInLine1.add(done_button);
        rowsInLine.add(rowInLine1);

        List<InlineKeyboardButton> rowInLine2 = new ArrayList<>();
        InlineKeyboardButton skip_task_button = new InlineKeyboardButton();
        skip_task_button.setText("‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å");
        skip_task_button.setCallbackData("SKIP_TASK_BUTTON");
        rowInLine2.add(skip_task_button);
        rowsInLine.add(rowInLine2);

        markupInLine.setKeyboard(rowsInLine);
        message.setReplyMarkup(markupInLine);

        try { execute(message); } catch (TelegramApiException e) {
            log.error("TASK –û–®–ò–ë–ö–ê: " + e.getMessage());
        }
    }


    private String normalizeLink(String raw) {
        if (raw == null) return null;
        String u = raw.trim();
        if (u.isEmpty()) return null;

        if (u.matches("^@?[A-Za-z0-9_]{5,}$")) {
            u = u.replaceFirst("^@", "");
            return "https://t.me/" + u;
        }

        if (u.startsWith("t.me/")) {
            return "https://" + u;
        }
        if (!u.startsWith("http://") && !u.startsWith("https://")) {
            u = "https://" + u;
        }

        return u.matches("(?i)^https?://t\\.me/.+") ? u : null;
    }

    private void withdrawCommandRecieved(long chatId, String username) {

        Optional<User> userOpt = userRepository.findById(chatId);

        if (userOpt.isEmpty()) {
            sendMessage(chatId, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
            return;
        }
        User user = userOpt.get();

        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText("–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: " + user.getBalance() + " ‚≠ê\uFE0F\n" +
                "\n" +
                "–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞\n" +
                "\n" +
                "–ö–∞–Ω–∞–ª —Å –≤—ã–≤–æ–¥–∞–º–∏: @StarsovEarnOut");

        InlineKeyboardMarkup markupInLine = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rowsInLine = new ArrayList<>();

        List<InlineKeyboardButton> rowInLine1 = new ArrayList<>();
        var fifty_stars_button = new InlineKeyboardButton();
        fifty_stars_button.setText("25‚≠ê\uFE0F");
        fifty_stars_button.setCallbackData("25_STARS");
        rowInLine1.add(fifty_stars_button);
        var twenty_five_stars_button = new InlineKeyboardButton();
        twenty_five_stars_button.setText("50‚≠ê\uFE0F");
        twenty_five_stars_button.setCallbackData("50_STARS");
        rowInLine1.add(twenty_five_stars_button);
        rowsInLine.add(rowInLine1);

        List<InlineKeyboardButton> rowInLine2 = new ArrayList<>();
        var fifteen_button = new InlineKeyboardButton();
        fifteen_button.setText("100‚≠ê\uFE0F");
        fifteen_button.setCallbackData("100_STARS");
        rowInLine2.add(fifteen_button);
        var hundred_stars_button = new InlineKeyboardButton();
        hundred_stars_button.setText("200‚≠ê\uFE0F");
        hundred_stars_button.setCallbackData("200_STARS");
        rowInLine2.add(hundred_stars_button);
        rowsInLine.add(rowInLine2);

        markupInLine.setKeyboard(rowsInLine);
        message.setReplyMarkup(markupInLine);
        try {
            execute(message);
        }
        catch (TelegramApiException e) {
            log.error("WITHDRAW –û–®–ò–ë–ö–ê: " + e.getMessage());
        }
        log.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: " + username + "\n" +
                "TelegramID:" + chatId + "\n" +
                "–Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É ''\uD83C\uDF81 –í—ã–≤–µ—Å—Ç–∏ –ó–≤—ë–∑–¥—ã''.");
    }

    private void buyStarsCommandRecieved(long chatId, String username) {
        startTopupFlow(chatId, username, "regular");
    }

    private void sendMessage(long chatId, String textToSend) {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(textToSend);

        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        List<KeyboardRow> keyboardRows = new ArrayList<>();

        KeyboardRow row = new KeyboardRow();
        row.add("‚≠ê\uFE0F –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –ó–≤—ë–∑–¥—ã");
        row.add("\uD83D\uDC8E –ó–∞–¥–∞–Ω–∏—è");
        keyboardRows.add(row);

        row = new KeyboardRow();
        row.add("\uD83C\uDF81 –í—ã–≤–µ—Å—Ç–∏ –ó–≤—ë–∑–¥—ã");
        keyboardRows.add(row);

        row = new KeyboardRow();
        row.add("\uD83D\uDC65 –ö—É–ø–∏—Ç—å –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤");
        keyboardRows.add(row);

        row = new KeyboardRow();
        row.add("\uD83D\uDCB8 –î—ë—à–µ–≤–æ –ö—É–ø–∏—Ç—å –ó–≤—ë–∑–¥—ã");
        keyboardRows.add(row);

        keyboardMarkup.setKeyboard(keyboardRows);
        keyboardMarkup.setResizeKeyboard(true);
        keyboardMarkup.setOneTimeKeyboard(false);
        keyboardMarkup.setSelective(false);
        keyboardMarkup.setIsPersistent(true);
        message.setReplyMarkup(keyboardMarkup);

        try {
            execute(message);
        }
        catch (TelegramApiException e) {
            log.error("–û–®–ò–ë–ö–ê: " + e.getMessage());
        }
    }
}

